//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: grpc-swift-ios-example/Services/proto/album.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Album_AlbumServiceClient`, then call methods of this protocol to make API calls.
internal protocol Album_AlbumServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Album_AlbumServiceClientInterceptorFactoryProtocol? { get }

  func createAlbum(
    _ request: Album_CreateAlbumRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Album_CreateAlbumRequest, Album_AlbumGeneralResponse>

  func getAlbum(
    _ request: Album_GetAlbumRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Album_GetAlbumRequest, Album_GetAlbumResponse>

  func getAlbums(
    _ request: Album_GetAlbumsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Album_GetAlbumsRequest, Album_GetAlbumsResponse>
}

extension Album_AlbumServiceClientProtocol {
  internal var serviceName: String {
    return "album.AlbumService"
  }

  /// Unary call to CreateAlbum
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAlbum.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAlbum(
    _ request: Album_CreateAlbumRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Album_CreateAlbumRequest, Album_AlbumGeneralResponse> {
    return self.makeUnaryCall(
      path: Album_AlbumServiceClientMetadata.Methods.createAlbum.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAlbumInterceptors() ?? []
    )
  }

  /// Unary call to GetAlbum
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAlbum.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAlbum(
    _ request: Album_GetAlbumRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Album_GetAlbumRequest, Album_GetAlbumResponse> {
    return self.makeUnaryCall(
      path: Album_AlbumServiceClientMetadata.Methods.getAlbum.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAlbumInterceptors() ?? []
    )
  }

  /// Unary call to GetAlbums
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAlbums.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAlbums(
    _ request: Album_GetAlbumsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Album_GetAlbumsRequest, Album_GetAlbumsResponse> {
    return self.makeUnaryCall(
      path: Album_AlbumServiceClientMetadata.Methods.getAlbums.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAlbumsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Album_AlbumServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Album_AlbumServiceNIOClient")
internal final class Album_AlbumServiceClient: Album_AlbumServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Album_AlbumServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Album_AlbumServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the album.AlbumService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Album_AlbumServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Album_AlbumServiceNIOClient: Album_AlbumServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Album_AlbumServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the album.AlbumService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Album_AlbumServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Album_AlbumServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Album_AlbumServiceClientInterceptorFactoryProtocol? { get }

  func makeCreateAlbumCall(
    _ request: Album_CreateAlbumRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Album_CreateAlbumRequest, Album_AlbumGeneralResponse>

  func makeGetAlbumCall(
    _ request: Album_GetAlbumRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Album_GetAlbumRequest, Album_GetAlbumResponse>

  func makeGetAlbumsCall(
    _ request: Album_GetAlbumsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Album_GetAlbumsRequest, Album_GetAlbumsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Album_AlbumServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Album_AlbumServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Album_AlbumServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateAlbumCall(
    _ request: Album_CreateAlbumRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Album_CreateAlbumRequest, Album_AlbumGeneralResponse> {
    return self.makeAsyncUnaryCall(
      path: Album_AlbumServiceClientMetadata.Methods.createAlbum.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAlbumInterceptors() ?? []
    )
  }

  internal func makeGetAlbumCall(
    _ request: Album_GetAlbumRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Album_GetAlbumRequest, Album_GetAlbumResponse> {
    return self.makeAsyncUnaryCall(
      path: Album_AlbumServiceClientMetadata.Methods.getAlbum.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAlbumInterceptors() ?? []
    )
  }

  internal func makeGetAlbumsCall(
    _ request: Album_GetAlbumsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Album_GetAlbumsRequest, Album_GetAlbumsResponse> {
    return self.makeAsyncUnaryCall(
      path: Album_AlbumServiceClientMetadata.Methods.getAlbums.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAlbumsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Album_AlbumServiceAsyncClientProtocol {
  internal func createAlbum(
    _ request: Album_CreateAlbumRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Album_AlbumGeneralResponse {
    return try await self.performAsyncUnaryCall(
      path: Album_AlbumServiceClientMetadata.Methods.createAlbum.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAlbumInterceptors() ?? []
    )
  }

  internal func getAlbum(
    _ request: Album_GetAlbumRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Album_GetAlbumResponse {
    return try await self.performAsyncUnaryCall(
      path: Album_AlbumServiceClientMetadata.Methods.getAlbum.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAlbumInterceptors() ?? []
    )
  }

  internal func getAlbums(
    _ request: Album_GetAlbumsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Album_GetAlbumsResponse {
    return try await self.performAsyncUnaryCall(
      path: Album_AlbumServiceClientMetadata.Methods.getAlbums.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAlbumsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Album_AlbumServiceAsyncClient: Album_AlbumServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Album_AlbumServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Album_AlbumServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Album_AlbumServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createAlbum'.
  func makeCreateAlbumInterceptors() -> [ClientInterceptor<Album_CreateAlbumRequest, Album_AlbumGeneralResponse>]

  /// - Returns: Interceptors to use when invoking 'getAlbum'.
  func makeGetAlbumInterceptors() -> [ClientInterceptor<Album_GetAlbumRequest, Album_GetAlbumResponse>]

  /// - Returns: Interceptors to use when invoking 'getAlbums'.
  func makeGetAlbumsInterceptors() -> [ClientInterceptor<Album_GetAlbumsRequest, Album_GetAlbumsResponse>]
}

internal enum Album_AlbumServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AlbumService",
    fullName: "album.AlbumService",
    methods: [
      Album_AlbumServiceClientMetadata.Methods.createAlbum,
      Album_AlbumServiceClientMetadata.Methods.getAlbum,
      Album_AlbumServiceClientMetadata.Methods.getAlbums,
    ]
  )

  internal enum Methods {
    internal static let createAlbum = GRPCMethodDescriptor(
      name: "CreateAlbum",
      path: "/album.AlbumService/CreateAlbum",
      type: GRPCCallType.unary
    )

    internal static let getAlbum = GRPCMethodDescriptor(
      name: "GetAlbum",
      path: "/album.AlbumService/GetAlbum",
      type: GRPCCallType.unary
    )

    internal static let getAlbums = GRPCMethodDescriptor(
      name: "GetAlbums",
      path: "/album.AlbumService/GetAlbums",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Album_AlbumServiceProvider: CallHandlerProvider {
  var interceptors: Album_AlbumServiceServerInterceptorFactoryProtocol? { get }

  func createAlbum(request: Album_CreateAlbumRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Album_AlbumGeneralResponse>

  func getAlbum(request: Album_GetAlbumRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Album_GetAlbumResponse>

  func getAlbums(request: Album_GetAlbumsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Album_GetAlbumsResponse>
}

extension Album_AlbumServiceProvider {
  internal var serviceName: Substring {
    return Album_AlbumServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateAlbum":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Album_CreateAlbumRequest>(),
        responseSerializer: ProtobufSerializer<Album_AlbumGeneralResponse>(),
        interceptors: self.interceptors?.makeCreateAlbumInterceptors() ?? [],
        userFunction: self.createAlbum(request:context:)
      )

    case "GetAlbum":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Album_GetAlbumRequest>(),
        responseSerializer: ProtobufSerializer<Album_GetAlbumResponse>(),
        interceptors: self.interceptors?.makeGetAlbumInterceptors() ?? [],
        userFunction: self.getAlbum(request:context:)
      )

    case "GetAlbums":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Album_GetAlbumsRequest>(),
        responseSerializer: ProtobufSerializer<Album_GetAlbumsResponse>(),
        interceptors: self.interceptors?.makeGetAlbumsInterceptors() ?? [],
        userFunction: self.getAlbums(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Album_AlbumServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Album_AlbumServiceServerInterceptorFactoryProtocol? { get }

  func createAlbum(
    request: Album_CreateAlbumRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Album_AlbumGeneralResponse

  func getAlbum(
    request: Album_GetAlbumRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Album_GetAlbumResponse

  func getAlbums(
    request: Album_GetAlbumsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Album_GetAlbumsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Album_AlbumServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Album_AlbumServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Album_AlbumServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Album_AlbumServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateAlbum":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Album_CreateAlbumRequest>(),
        responseSerializer: ProtobufSerializer<Album_AlbumGeneralResponse>(),
        interceptors: self.interceptors?.makeCreateAlbumInterceptors() ?? [],
        wrapping: { try await self.createAlbum(request: $0, context: $1) }
      )

    case "GetAlbum":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Album_GetAlbumRequest>(),
        responseSerializer: ProtobufSerializer<Album_GetAlbumResponse>(),
        interceptors: self.interceptors?.makeGetAlbumInterceptors() ?? [],
        wrapping: { try await self.getAlbum(request: $0, context: $1) }
      )

    case "GetAlbums":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Album_GetAlbumsRequest>(),
        responseSerializer: ProtobufSerializer<Album_GetAlbumsResponse>(),
        interceptors: self.interceptors?.makeGetAlbumsInterceptors() ?? [],
        wrapping: { try await self.getAlbums(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Album_AlbumServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createAlbum'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAlbumInterceptors() -> [ServerInterceptor<Album_CreateAlbumRequest, Album_AlbumGeneralResponse>]

  /// - Returns: Interceptors to use when handling 'getAlbum'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAlbumInterceptors() -> [ServerInterceptor<Album_GetAlbumRequest, Album_GetAlbumResponse>]

  /// - Returns: Interceptors to use when handling 'getAlbums'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAlbumsInterceptors() -> [ServerInterceptor<Album_GetAlbumsRequest, Album_GetAlbumsResponse>]
}

internal enum Album_AlbumServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AlbumService",
    fullName: "album.AlbumService",
    methods: [
      Album_AlbumServiceServerMetadata.Methods.createAlbum,
      Album_AlbumServiceServerMetadata.Methods.getAlbum,
      Album_AlbumServiceServerMetadata.Methods.getAlbums,
    ]
  )

  internal enum Methods {
    internal static let createAlbum = GRPCMethodDescriptor(
      name: "CreateAlbum",
      path: "/album.AlbumService/CreateAlbum",
      type: GRPCCallType.unary
    )

    internal static let getAlbum = GRPCMethodDescriptor(
      name: "GetAlbum",
      path: "/album.AlbumService/GetAlbum",
      type: GRPCCallType.unary
    )

    internal static let getAlbums = GRPCMethodDescriptor(
      name: "GetAlbums",
      path: "/album.AlbumService/GetAlbums",
      type: GRPCCallType.unary
    )
  }
}
